/*
 * Copyright 2019, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.trackmysleepquality.sleeptracker

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.GridLayoutManager
import com.example.android.trackmysleepquality.R
import com.example.android.trackmysleepquality.database.SleepDatabase
import com.example.android.trackmysleepquality.databinding.FragmentSleepTrackerBinding
import com.google.android.material.snackbar.Snackbar

/**
 * A fragment with buttons to record start and end times for sleep, which are saved in
 * a database. Cumulative data is displayed in a simple scrollable TextView.
 * (Because we have not learned about RecyclerView yet.)
 * The Clear button will clear all data from the database.
 */
class SleepTrackerFragment : Fragment() {

    /**
     * Called when the Fragment is ready to display content to the screen.
     *
     * This function uses DataBindingUtil to inflate R.layout.fragment_sleep_quality.
     *
     * It is also responsible for passing the [SleepTrackerViewModel] to the
     * [FragmentSleepTrackerBinding] generated by DataBinding. This will allow DataBinding
     * to use the [LiveData] on our ViewModel.
     */
    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {

        val application = requireNotNull(this.activity).application
        val dataSource = SleepDatabase.getInstance(application).sleepDatabaseDao
        val adapter = SleepNightAdapter()

        val viewModelFactory = SleepTrackerViewModelFactory(dataSource, application)
        val sleepTrackerViewModel = ViewModelProvider(this, viewModelFactory)
            .get(SleepTrackerViewModel::class.java).also {

                it.nights.observe(viewLifecycleOwner, { nights ->
                    nights?.let { adapter.submitList(nights) }
                })

                it.showSnackBarEvent.observe(viewLifecycleOwner, { isShowSnackBarEvent ->
                    if (isShowSnackBarEvent == true) {
                        Snackbar.make(
                            requireActivity().findViewById(android.R.id.content),
                            getString(R.string.cleared_message),
                            Snackbar.LENGTH_SHORT
                        ).show()
                        it.doneShowingSnackbar()
                    }
                })

                it.navigateToSleepQuality.observe(viewLifecycleOwner, Observer { night ->
                    night?.let { _ ->
                        this.findNavController().navigate(
                            SleepTrackerFragmentDirections
                                .actionSleepTrackerFragmentToSleepQualityFragment(night.nightId))
                        it.doneNavigating()
                    }
                })
            }



        val binding =  DataBindingUtil.inflate<FragmentSleepTrackerBinding>(
            inflater,
            R.layout.fragment_sleep_tracker,
            container,
            false
        ).also {
            it.sleepTrackerViewModel = sleepTrackerViewModel
            it.lifecycleOwner = this
            it.sleepList.adapter = adapter
            it.sleepList.layoutManager = GridLayoutManager(
                activity, 3, GridLayoutManager.VERTICAL, false
            )

        }

        return binding.root
    }
}
